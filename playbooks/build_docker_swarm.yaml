---

- name: Create two manager groups based on status
  hosts: managers
  become: true

  tasks:
    - name: Create variable with nodes status
      ansible.builtin.shell: >
        docker info --format \{\{.Swarm.LocalNodeState\}\}
      register: swarm_status
      changed_when: true

    - name: Create 'manager operational' group
      ansible.builtin.add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: Create 'manager bootstrap' group
      ansible.builtin.add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

- name: Create two worker groups based on status
  hosts: workers
  become: true

  tasks:
    - name: Create variable with nodes status
      ansible.builtin.shell: >
        docker info --format \{\{.Swarm.LocalNodeState\}\}
      register: swarm_status
      changed_when: true

    - name: Create 'worker operational' group
      ansible.builtin.add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: Create 'worker bootstrap' group
      ansible.builtin.add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

- name: Bootstrap any managers that are not already operational
  hosts: swarm_manager_bootstrap[0]
  become: true
  tasks:
    - name: Initialize swarm cluster
      ansible.builtin.shell: >
        docker swarm init
        --advertise-addr={{ swarm_iface | default('enp0s8') }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: Add initialized host to swarm_manager_operational group
      ansible.builtin.add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: bootstrap_first_node.changed

# retrieve the swarm tokens and populate a list of ips listening on
# the swarm port 2377
- name: Manager operational
  hosts: swarm_manager_operational[0]
  become: true
  vars:
    iface: "{{ swarm_iface | default('enp0s8') }}"
  tasks:
    - name: Retrieve swarm manager token
      ansible.builtin.shell: >
        docker swarm join-token manager -q
      register: swarm_manager_token
      changed_when: true

    - name: Retrieve swarm worker token
      ansible.builtin.shell: >
        docker swarm join-token -q worker
      register: swarm_worker_token

    - name: Populate list of manager ips
      ansible.builtin.add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"

- name: Join the 'bootstrap" managers to the cluster
  hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: Join manager nodes to cluster
      ansible.builtin.shell: >
        docker swarm join
        --advertise-addr={{ swarm_iface | default('enp0s8') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377
      changed_when: true

# join the worker hosts not yet initialized to the swarm cluster
- name: Join workers
  hosts: swarm_worker_bootstrap
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: Join worker nodes to cluster
      ansible.builtin.shell: >
        docker swarm join
        --advertise-addr={{ swarm_iface | default('enp0s8') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377
      changed_when: true
...
